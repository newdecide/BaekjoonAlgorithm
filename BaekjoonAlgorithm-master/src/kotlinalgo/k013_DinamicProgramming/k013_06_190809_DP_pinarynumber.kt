package kotlinalgo.k013_DinamicProgramming

import java.util.*

// 2193번
// 이친수 문제
// 0과 1로만 이루어진 수를 이진수라 한다. 이러한 이진수 중 특별한 성질을 갖는 것들이 있는데,
// 이들을 이친수(pinary number)라 한다. 이친수는 다음의 성질을 만족한다.
// 이친수는 0으로 시작하지 않는다.
// 이친수에서는 1이 두 번 연속으로 나타나지 않는다. 즉, 11을 부분 문자열로 갖지 않는다.
// 예를 들면 1, 10, 100, 101, 1000, 1001 등이 이친수가 된다.
// 하지만 0010101이나 101101은 각각 1, 2번 규칙에 위배되므로 이친수가 아니다.
// N(1 ≤ N ≤ 90)이 주어졌을 때, N자리 이친수의 개수를 구하는 프로그램을 작성하시오.

// 1자리 수 일때는 1 만 올 수 있다. (1개)
// 2자리 수 일때는 10 만 올 수 있다. (1개)
// 3자리 수 일때는 101, 100 이 올 수 있다. (2개)
// 4자리 수 일때는 1010, 1000, 1001 이 올 수 있다. (3개)
// 5자리 수 일때는 10100, 10101, 10000, 10001, 10010 이 올 수 있다. (5개)
// 6자리 수 일때는 101000, 101001, 101010, 100000, 100001, 100010, 100100, 100101 이 올 수 있다. (8개)

fun main(args: Array<String>) {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()
    val arr = IntArray(n)
    // 1아면 1출력
    if (n == 1) {
        arr[0] = 1
        // 2여도 1출력
    } else if (n == 2) {
        arr[1] = 1
    } else {
        // 0번째 1번째는 1 저장
        arr[0] = 1
        arr[1] = 1

        // 2~n까지 확인
        for (i in 2 until n) {
            arr[i] = arr[i - 1] + arr[i - 2]
        }
    }
    sc.close()
    println(arr[n - 1])
}